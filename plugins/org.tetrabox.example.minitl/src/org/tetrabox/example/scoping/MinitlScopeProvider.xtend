/*
 * generated by Xtext 2.27.0
 */
package org.tetrabox.example.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.tetrabox.example.minitl.Binding
import org.tetrabox.example.minitl.ObjectTemplate
import org.tetrabox.example.minitl.FieldAccessValue
import org.tetrabox.example.minitl.ObjectTemplateValue

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MinitlScopeProvider extends AbstractMinitlScopeProvider {
	
	override IScope getScope(EObject context, EReference reference) {
		if (context instanceof Binding) {
			return Scopes.scopeFor(((context.eContainer() as ObjectTemplate)).getType().getEStructuralFeatures())
		} else if (context instanceof FieldAccessValue) {
			
			// FIXME: currently only manage a navigation depth of 1, can be recursive (need better test)
			return Scopes.scopeFor((context.object as ObjectTemplateValue).objecttemplate.type.EStructuralFeatures) 
		}
		return super.getScope(context, reference)
	}
	
}
