/*
 * generated by Xtext 2.27.0
 */
package org.tetrabox.example.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.tetrabox.example.ide.contentassist.antlr.internal.InternalMinitlParser;
import org.tetrabox.example.services.MinitlGrammarAccess;

public class MinitlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MinitlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MinitlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getTransformationAccess().getGroup(), "rule__Transformation__Group__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup_4(), "rule__Transformation__Group_4__0");
			builder.put(grammarAccess.getTransformationAccess().getGroup_5(), "rule__Transformation__Group_5__0");
			builder.put(grammarAccess.getInputMetamodelAccess().getGroup(), "rule__InputMetamodel__Group__0");
			builder.put(grammarAccess.getMetamodelAccess().getGroup(), "rule__Metamodel__Group__0");
			builder.put(grammarAccess.getMetamodelAccess().getGroup_1(), "rule__Metamodel__Group_1__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getObjectTemplateAccess().getGroup(), "rule__ObjectTemplate__Group__0");
			builder.put(grammarAccess.getObjectTemplateAccess().getGroup_3(), "rule__ObjectTemplate__Group_3__0");
			builder.put(grammarAccess.getObjectTemplateAccess().getGroup_3_1(), "rule__ObjectTemplate__Group_3_1__0");
			builder.put(grammarAccess.getObjectTemplateAccess().getGroup_3_1_1(), "rule__ObjectTemplate__Group_3_1_1__0");
			builder.put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
			builder.put(grammarAccess.getMaybeBinaryAccess().getGroup(), "rule__MaybeBinary__Group__0");
			builder.put(grammarAccess.getMaybeBinaryAccess().getGroup_1(), "rule__MaybeBinary__Group_1__0");
			builder.put(grammarAccess.getMaybeFieldAccessValueAccess().getGroup(), "rule__MaybeFieldAccessValue__Group__0");
			builder.put(grammarAccess.getMaybeFieldAccessValueAccess().getGroup_1(), "rule__MaybeFieldAccessValue__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getTransformationAccess().getNameAssignment_1(), "rule__Transformation__NameAssignment_1");
			builder.put(grammarAccess.getTransformationAccess().getInputMetamodelAssignment_3(), "rule__Transformation__InputMetamodelAssignment_3");
			builder.put(grammarAccess.getTransformationAccess().getOutputMetamodelAssignment_4_1(), "rule__Transformation__OutputMetamodelAssignment_4_1");
			builder.put(grammarAccess.getTransformationAccess().getRulesAssignment_5_0(), "rule__Transformation__RulesAssignment_5_0");
			builder.put(grammarAccess.getTransformationAccess().getRulesAssignment_5_1(), "rule__Transformation__RulesAssignment_5_1");
			builder.put(grammarAccess.getMetamodelAccess().getPackagesAssignment_0(), "rule__Metamodel__PackagesAssignment_0");
			builder.put(grammarAccess.getMetamodelAccess().getPackagesAssignment_1_1(), "rule__Metamodel__PackagesAssignment_1_1");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getObjectTemplatesAssignment_4(), "rule__Rule__ObjectTemplatesAssignment_4");
			builder.put(grammarAccess.getRuleAccess().getObjectTemplatesAssignment_6(), "rule__Rule__ObjectTemplatesAssignment_6");
			builder.put(grammarAccess.getObjectTemplateAccess().getNameAssignment_0(), "rule__ObjectTemplate__NameAssignment_0");
			builder.put(grammarAccess.getObjectTemplateAccess().getTypeAssignment_2(), "rule__ObjectTemplate__TypeAssignment_2");
			builder.put(grammarAccess.getObjectTemplateAccess().getBindingsAssignment_3_1_0(), "rule__ObjectTemplate__BindingsAssignment_3_1_0");
			builder.put(grammarAccess.getObjectTemplateAccess().getBindingsAssignment_3_1_1_1(), "rule__ObjectTemplate__BindingsAssignment_3_1_1_1");
			builder.put(grammarAccess.getBindingAccess().getFeatureAssignment_0(), "rule__Binding__FeatureAssignment_0");
			builder.put(grammarAccess.getBindingAccess().getValueAssignment_2(), "rule__Binding__ValueAssignment_2");
			builder.put(grammarAccess.getMaybeBinaryAccess().getOperatorAssignment_1_1(), "rule__MaybeBinary__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMaybeBinaryAccess().getExpressionsAssignment_1_2(), "rule__MaybeBinary__ExpressionsAssignment_1_2");
			builder.put(grammarAccess.getMaybeFieldAccessValueAccess().getFeatureAssignment_1_2(), "rule__MaybeFieldAccessValue__FeatureAssignment_1_2");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
			builder.put(grammarAccess.getObjectTemplateValueAccess().getObjecttemplateAssignment(), "rule__ObjectTemplateValue__ObjecttemplateAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MinitlGrammarAccess grammarAccess;

	@Override
	protected InternalMinitlParser createParser() {
		InternalMinitlParser result = new InternalMinitlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MinitlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MinitlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
